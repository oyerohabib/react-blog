{"version":3,"sources":["best6.png","component/Navbar.js","component/Home.js","component/About.js","hoc/Rainbow.js","component/Contact.js","component/Post.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","withRouter","props","className","to","Home","console","log","this","posts","postList","length","map","post","key","id","src","logo","alt","title","body","Component","connect","state","Rainbow","WrappedComponent","Math","floor","random","Contact","Post","ownProps","match","params","post_id","find","App","exact","path","component","About","Boolean","window","location","hostname","initState","rootReducer","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.31e4d3e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/best6.efd5afbb.png\";","import React from 'react'\r\nimport { Link, NavLink, withRouter } from 'react-router-dom'\r\n\r\nconst Navbar = (props) => {\r\n    // setTimeout(() => {\r\n    //     props.history.push('/about')\r\n    // }, 2000)\r\n    return(\r\n        <nav className=\"nav-wrapper red darken-3\">\r\n            <div className=\"container\">\r\n                <span className=\"brand-logo left\">OYEROTECH</span>\r\n                <ul className=\"right\">\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><NavLink to=\"/about\">About</NavLink></li>\r\n                    <li><NavLink to=\"/contact\">Contact</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default withRouter(Navbar)","import React, { Component } from 'react'\r\n// import axios from 'axios'\r\nimport { Link } from 'react-router-dom'\r\nimport logo from '../best6.png'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Home extends Component {\r\n    // state = {\r\n    //     posts : []\r\n    // }\r\n    // componentDidMount () {\r\n    //     axios.get('https://jsonplaceholder.typicode.com/posts')\r\n    //     .then(response => {\r\n    //         console.log(response);\r\n    //         this.setState({\r\n    //             posts : response.data.slice(0,15)\r\n    //         })\r\n    //     })\r\n    // }\r\n    render (){ \r\n        console.log(this.props);\r\n        // const { posts } = this.state\r\n        const { posts } = this.props\r\n        const postList = posts.length ? (\r\n            posts.map(post => {\r\n                return (\r\n                    <div className=\"post card\" key={post.id}>\r\n                    <img src={logo} alt=\"my logo\" />\r\n                        <div className=\"card-content\">\r\n                            <Link to={'/' + post.id}><span className=\"card-title red-text\">{post.title}</span></Link>\r\n                            <p>{post.body}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        ) : (\r\n            <div className=\"center\">No post's yet</div>\r\n        )\r\n        return(\r\n            <div className=\"container home\">\r\n                <h4 className=\"center\">Home</h4>\r\n                {postList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n    \r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts : state.posts\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Home)\r\n\r\n","import React from 'react'\r\nimport Rainbow from '../hoc/Rainbow'\r\n\r\nconst About = () => {\r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">About</h4>\r\n            <p>lorem is not working.lorem is not working.lorem is not working.lorem is not working.lorem is not working.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rainbow(About)","import React from 'react'\r\n\r\nconst Rainbow = (WrappedComponent) => {\r\n\r\n    const colors = ['red', 'pink', 'orange', 'green', 'yellow'];\r\n    const RandomColor = colors[Math.floor(Math.random() * 5)];\r\n    const className = RandomColor + '-text';\r\n\r\n    return(props => {\r\n        return (\r\n            <div className={className}>\r\n                <WrappedComponent />\r\n            </div>\r\n        )\r\n    })\r\n}\r\n\r\nexport default Rainbow","import React from 'react'\r\n\r\nconst Contact = (props) => {\r\n    // console.log(props)\r\n    // setTimeout(() => {\r\n    //     props.history.push('/about')\r\n    // }, 2000);\r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">Contact</h4>\r\n            <p>lorem is not working.lorem is not working.lorem is not working.lorem is not working.lorem is not working.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React, { Component } from 'react'\r\n// import axios from 'axios'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Post extends Component {\r\n    // state = {\r\n    //     post : null\r\n    // }\r\n    // componentDidMount () {\r\n    //     console.log(this.props);\r\n    //     let id = this.props.match.params.post_id;\r\n    //     axios.get('https://jsonplaceholder.typicode.com/posts/' + id)\r\n    //         .then(response => {\r\n    //             this.setState({\r\n    //                 post : response.data\r\n    //             })\r\n    //             // console.log(response)\r\n    //         })\r\n    // }\r\n    render () {\r\n\r\n        const post = this.props.post ? (\r\n            <div className=\"post\">\r\n                <h4 className=\"center\">{this.props.post.title}</h4>\r\n                <div>{this.props.post.body}</div>\r\n            </div>\r\n        ) : (\r\n            <div className=\"center\">Loading Post...</div>\r\n        )\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h4>{post}</h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    let id  = ownProps.match.params.post_id;\r\n    return {\r\n        post : state.posts.find(post => post.id === id)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Post)","import React, {Component} from 'react'\nimport Navbar from './component/Navbar'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Home from './component/Home'\nimport About from './component/About'\nimport Contact from './component/Contact'\nimport Post from './component/Post'\n\nclass App extends Component{\n  render () {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={Home}></Route>\n            <Route path='/about' component={About}></Route>\n            <Route path='/contact' component={Contact}></Route>\n            <Route path='/:post_id' component={Post}></Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    posts : [\r\n        {id: '1', title: 'play mini games', body: 'I love playing games after a hard day work'},\r\n        {id: '2', title: 'program using python', body: 'I will multitask myself into programming and studies'},\r\n        {id: '3', title: 'have a nice time with family', body: 'I love having nice time with my family at the beach'}\r\n    ] \r\n}\r\n\r\nconst rootReducer = (state=initState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}><App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}